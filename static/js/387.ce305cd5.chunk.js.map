{"version":3,"file":"static/js/387.ce305cd5.chunk.js","mappings":"kTAEMA,EAAW,gCACXC,EAAU,mCAEHC,EAAkB,mCAAG,oGACTC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,sCACoBC,IAFX,cAC1BG,EAD0B,yBAIzBA,EAASC,KAAKC,SAJW,2CAAH,qDAOlBC,EAAoB,mCAAG,WAAMC,GAAN,gFAC5BC,EAAe,IAAIC,gBAAgB,CACvCC,eAAe,EACfC,SAAU,QACVC,KAAM,EACNL,MAAOA,EACPM,QAASb,IANuB,SASXE,EAAAA,EAAAA,IAAA,UAAaH,EAAb,wBAAqCS,IAT1B,cAS5BL,EAT4B,yBAU3BA,EAASC,KAAKC,SAVa,2CAAH,sDAapBS,EAAiB,mCAAG,WAAMC,GAAN,uFACRb,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDgB,EADC,oBACaf,EADb,oBADQ,cACzBG,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,sDAOjBY,EAAc,mCAAG,WAAMD,GAAN,uFACLb,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDgB,EADC,4BACqBf,EADrB,oBADK,cACtBG,EADsB,yBAIrBA,EAASC,KAAKa,MAJO,2CAAH,sDAOdC,EAAgB,mCAAG,WAAMH,GAAN,uFACPb,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDgB,EADC,4BACqBf,EADrB,oBADO,cACxBG,EADwB,yBAIvBA,EAASC,KAAKC,SAJS,2CAAH,qD,4KCrChBc,EAAcC,EAAAA,EAAAA,GAAH,yYAwBXC,EAAeD,EAAAA,EAAAA,IAAH,4H,SC4BzB,EAhDgB,WACd,OAAsCE,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAwBR,OAtBAE,EAAAA,EAAAA,YAAU,WAAM,wCAEd,6FACEH,GAAa,GADf,mBAGgCV,EAAAA,EAAAA,IAAiBW,GAHjD,UAIiC,KADvBG,EAHV,QAIsBC,OAJtB,uBAKYR,EAAQ,IAAIS,MAChB,qDAEFR,EAASD,GARf,0BAWID,EAAeQ,GAXnB,kDAaIN,EAAS,EAAD,IAbZ,yBAeIE,GAAa,GAfjB,8EAFc,0DACdO,EAmBD,GAAE,CAACN,KAGF,gCACGJ,IACC,SAACJ,EAAD,UAAc,sDAIfM,IAAa,SAACS,EAAA,EAAD,KACd,SAACjB,EAAD,UACGI,EAAYc,KAAI,gBAAGtB,EAAH,EAAGA,GAAIuB,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACf,2BACE,0BAAI,WAASD,MACb,uBAAIC,MAFGxB,EADM,QASxB,C","sources":["API.js","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '92bb2a20c6051763aaa8cddb640904d8';\n\nexport const fetchPopularMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n\nexport const fetchMoviesWithQuery = async query => {\n  const searchParams = new URLSearchParams({\n    include_adult: false,\n    language: 'en-US',\n    page: 1,\n    query: query,\n    api_key: API_KEY,\n  });\n\n  const response = await axios.get(`${BASE_URL}search/movie?${searchParams}`);\n  return response.data.results;\n};\n\nexport const fetchMovieDetails = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const fetchMovieCast = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const fetchMovieReview = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.results;\n};","import styled from '@emotion/styled';\n\nexport const ReviewsList = styled.ul`\n  margin-top: 10px;\n  display: flex;\n  gap: 15px;\n  justify-content: space-between;\n  align-items: center;\n  flex-wrap: wrap;\n  margin-bottom: 20px;\n\n  > li {\n    margin-top: 18px;\n  }\n  > li > h4 {\n    margin-bottom: 5px;\n    font-size: 16px;\n  }\n\n  > li > p {\n    max-width: 1200px;\n    font-size: 16px;\n    color: var(--primary-text-color);\n  }\n`;\n\nexport const ErrorHandler = styled.div`\n  margin-top: 18px;\n  margin-left: 15px;\n  font-size: 16px;\n  color: var(--primary-text-color);\n`;","import { fetchMovieReview } from 'API';\nimport Loader from 'components/Loader/Loader';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ErrorHandler, ReviewsList } from './Reviews.styled';\n\nconst Reviews = () => {\n  const [movieReview, setMovieReview] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    fetchReviews();\n    async function fetchReviews() {\n      setIsLoading(true);\n      try {\n        const responseMovie = await fetchMovieReview(movieId);\n        if (responseMovie.length === 0) {\n          const error = new Error(\n            'Sorry, we do not have any reviews for this movie.'\n          );\n          setError(error);\n          return;\n        }\n        setMovieReview(responseMovie);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  }, [movieId]);\n\n  return (\n    <>\n      {error && (\n        <ErrorHandler>\n          Sorry, we do not have any reviews for this movie.\n        </ErrorHandler>\n      )}\n      {isLoading && <Loader />}\n      <ReviewsList>\n        {movieReview.map(({ id, author, content }) => (\n          <li key={id}>\n            <h4>Author: {author}</h4>\n            <p>{content}</p>\n          </li>\n        ))}\n      </ReviewsList>\n    </>\n  );\n};\n\nexport default Reviews;"],"names":["BASE_URL","API_KEY","fetchPopularMovies","axios","response","data","results","fetchMoviesWithQuery","query","searchParams","URLSearchParams","include_adult","language","page","api_key","fetchMovieDetails","id","fetchMovieCast","cast","fetchMovieReview","ReviewsList","styled","ErrorHandler","useState","movieReview","setMovieReview","error","setError","isLoading","setIsLoading","movieId","useParams","useEffect","responseMovie","length","Error","fetchReviews","Loader","map","author","content"],"sourceRoot":""}