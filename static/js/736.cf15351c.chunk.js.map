{"version":3,"file":"static/js/736.cf15351c.chunk.js","mappings":"kTAEMA,EAAW,gCACXC,EAAU,mCAEHC,EAAkB,mCAAG,oGACTC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,sCACoBC,IAFX,cAC1BG,EAD0B,yBAIzBA,EAASC,KAAKC,SAJW,2CAAH,qDAOlBC,EAAoB,mCAAG,WAAMC,GAAN,gFAC5BC,EAAe,IAAIC,gBAAgB,CACvCC,eAAe,EACfC,SAAU,QACVC,KAAM,EACNL,MAAOA,EACPM,QAASb,IANuB,SASXE,EAAAA,EAAAA,IAAA,UAAaH,EAAb,wBAAqCS,IAT1B,cAS5BL,EAT4B,yBAU3BA,EAASC,KAAKC,SAVa,2CAAH,sDAapBS,EAAiB,mCAAG,WAAMC,GAAN,uFACRb,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDgB,EADC,oBACaf,EADb,oBADQ,cACzBG,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,sDAOjBY,EAAc,mCAAG,WAAMD,GAAN,uFACLb,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDgB,EADC,4BACqBf,EADrB,oBADK,cACtBG,EADsB,yBAIrBA,EAASC,KAAKa,MAJO,2CAAH,sDAOdC,EAAgB,mCAAG,WAAMH,GAAN,uFACPb,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDgB,EADC,4BACqBf,EADrB,oBADO,cACxBG,EADwB,yBAIvBA,EAASC,KAAKC,SAJS,2CAAH,qD,8LCrChBc,EAASC,EAAAA,EAAAA,GAAD,mYAuBRC,GANKD,EAAAA,EAAAA,GAAD,2FAMEA,EAAAA,EAAAA,IAAD,6QAiBLE,EAAKF,EAAAA,EAAAA,EAAD,qKASJG,EAAKH,EAAAA,EAAAA,EAAD,4G,GAMCA,EAAAA,EAAAA,EAAD,wP,QCQjB,EAvDa,WACX,OAAkCI,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QA0BR,OAxBAE,EAAAA,EAAAA,YAAU,WAAM,wCAGd,6FACEH,GAAa,GADf,mBAGgCd,EAAAA,EAAAA,IAAee,GAH/C,UAKiC,KAFvBG,EAHV,QAKsBC,OALtB,uBAMYR,EAAQ,IAAIS,MAChB,8DAEFR,EAASD,GATf,0BAYID,EAAaQ,GAZjB,kDAcIN,EAAS,EAAD,IAdZ,yBAgBIE,GAAa,GAhBjB,8EAHc,0DACdO,EAqBD,GAAE,CAACN,KAGF,gCACGJ,GAASW,EAAAA,OAAAA,QAAA,UAAkBX,EAAMY,UACjCV,IAAa,SAACW,EAAA,EAAD,KACd,SAACrB,EAAD,UACGM,EAAUgB,KAAI,gBAAG1B,EAAH,EAAGA,GAAI2B,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACb,2BACE,SAACvB,EAAD,CACEwB,IACEH,EAAY,0CAC2BA,GA1CrD,4JA6CYI,IAAKH,EACLI,MAAO,OAET,SAACzB,EAAD,UAAOqB,KACP,SAACpB,EAAD,UAAOqB,MAXA7B,EADI,QAkBtB,C","sources":["API.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '92bb2a20c6051763aaa8cddb640904d8';\n\nexport const fetchPopularMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n\nexport const fetchMoviesWithQuery = async query => {\n  const searchParams = new URLSearchParams({\n    include_adult: false,\n    language: 'en-US',\n    page: 1,\n    query: query,\n    api_key: API_KEY,\n  });\n\n  const response = await axios.get(`${BASE_URL}search/movie?${searchParams}`);\n  return response.data.results;\n};\n\nexport const fetchMovieDetails = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const fetchMovieCast = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const fetchMovieReview = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.results;\n};","import styled from '@emotion/styled';\n\nexport const CastList=styled.ul` display: flex;\nflex-wrap: wrap;\njustify-content: space-between;\nalign-items: center;\ngap: 10px;\nlist-style: none;\n\n>li {\n    flex-basis: calc((100% - 6 * (10px)) / 7);\n    border-radius: 5px;\n    background-color: #ffffff;\n    box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.08), 0px 3px 3px rgba(0, 0, 0, 0.02),\n        1px 3px 4px rgba(0, 0, 0, 0.08);\n}\n\n`;\n\nexport const List=styled.ul` display: flex;\nflex-wrap: wrap;\ngap: 30px;\nmargin-bottom: 30px;\n`;\n\nexport const Image=styled.img` width: 100%;\n// height: 100%;\nheight: 304px;\ndisplay: block;\nobject-fit: contain;\nborder-radius: 5px;\n\ntransition: var(--transition);\n\n&:hover,\n&:focus {\n    border-bottom-left-radius: 0px;\n    border-bottom-right-radius: 0px;\n}\n\n`;\n\nexport const Name=styled.p` font-size: 16px;\nfont-weight: 500;\npadding-top: 12px;\npadding-left: 8px;\npadding-right: 8px;\npadding-bottom: 12px;\ntext-align: center;\n`;\n\nexport const Role=styled.p` padding-left: 8px;\npadding-right: 8px;\npadding-bottom: 12px;\ntext-align: center;\n`;\n\nexport const Info=styled.p` font-weight: 500;\nfont-size: 14px;\npadding-top: 12px;\npadding-left: 8px;\npadding-right: 8px;\npadding-bottom: 12px;\ncolor: var(--primary-text-color);\ntext-transform: uppercase;\nline-height: 1.16;\ntext-align: center;\n`;","import { fetchMovieCast } from 'API';\nimport { Notify } from 'notiflix';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Loader from 'components/Loader/Loader';\nimport { CastList, Image, Name, Role } from './Cast.styled';\n\nconst DEFAULT_PROFILE_URL =\n  'https://www.themoviedb.org/assets/2/v4/glyphicons/basic/glyphicons-basic-4-user-grey-d8fe957375e70239d6abdd549fd7568c89281b2179b5f4470e2e12895792dfa5.svg';\n\nconst Cast = () => {\n  const [movieCast, setMovieCast] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    fetchCast();\n\n    async function fetchCast() {\n      setIsLoading(true);\n      try {\n        const responseMovie = await fetchMovieCast(movieId);\n\n        if (responseMovie.length === 0) {\n          const error = new Error(\n            'Sorry, there is no info about movie you are searching for.'\n          );\n          setError(error);\n          return;\n        }\n        setMovieCast(responseMovie);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  }, [movieId]);\n\n  return (\n    <>\n      {error && Notify.failure(`${error.message}`)}\n      {isLoading && <Loader />}\n      <CastList>\n        {movieCast.map(({ id, profile_path, name, character }) => (\n          <li key={id}>\n            <Image\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/w154/${profile_path}`\n                  : DEFAULT_PROFILE_URL\n              }\n              alt={name}\n              width={154}\n            />\n            <Name>{name}</Name>\n            <Role>{character}</Role>\n          </li>\n        ))}\n      </CastList>\n    </>\n  );\n};\n\nexport default Cast;"],"names":["BASE_URL","API_KEY","fetchPopularMovies","axios","response","data","results","fetchMoviesWithQuery","query","searchParams","URLSearchParams","include_adult","language","page","api_key","fetchMovieDetails","id","fetchMovieCast","cast","fetchMovieReview","CastList","styled","Image","Name","Role","useState","movieCast","setMovieCast","error","setError","isLoading","setIsLoading","movieId","useParams","useEffect","responseMovie","length","Error","fetchCast","Notify","message","Loader","map","profile_path","name","character","src","alt","width"],"sourceRoot":""}